{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nimport React, { useState, useEffect } from \"react\";\nimport { Chat, refreshMessages } from '../components/Chat/Chat'; // Here is code responsible for websockets functionality\n// like send message, handle websocket, connect and disconnect\n\nvar stompClient = null;\nvar handlers = [];\nvar currentSubscription;\nvar messageHandler = null;\nvar topic = null;\nvar username = null;\nvar roomId = null;\nexport function connect(userName, roomID) {\n  username = userName;\n  roomId = roomID;\n  var socket = new SockJS('http://localhost:8080/ownsite'); // connecting to the Spring server\n\n  stompClient = Stomp.over(socket);\n\n  stompClient.debug = function () {}; // stompClient.connect({}, frame => {\n  //     stompClient.subscribe('/topic/method', message => {\n  //         handlers.forEach(handler => handler(JSON.parse(message.body)))\n  //         console.log(message)\n  //     })\n  // })\n\n\n  stompClient.connect({}, onConnected, onError);\n  console.log('Connected');\n}\nexport function addHandler(handler) {\n  handlers.push(handler);\n}\nexport function disconnect() {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n  }\n\n  console.log(\"Disconnected\");\n}\nexport function setMessageHandler(messageHandler) {\n  this.messageHandler = messageHandler;\n}\nexport function onConnected() {\n  enterRoom(roomId);\n}\nexport function onError(error) {} // Leave the current room and enter a new one.\n\nfunction enterRoom(newRoomId) {\n  roomId = newRoomId;\n  topic = \"/app/chat/\".concat(newRoomId); // form a address to send for new room\n\n  if (currentSubscription) {\n    currentSubscription.unsubscribe();\n  } // establish subscription on specified address \"/chat-channel/${roomId}\"\n  // and attach handler onMessageReceived()\n  // It means this handler will process received messages at that address\n\n\n  currentSubscription = stompClient.subscribe(\"/chat-channel/\".concat(roomId), onMessageReceived); // send request for joining current user in chatroom \n\n  stompClient.send(\"\".concat(topic, \"/addUser\"), {}, JSON.stringify({\n    sender: username,\n    type: 'JOIN'\n  }));\n} // send messages to server (backend)\n\n\nexport function sendMessageToServer(message) {\n  var messageContent = message.text; // if it's just conversation message, then create response and send it to backend\n\n  if (messageContent && stompClient) {\n    var chatMessage = {\n      sender: username,\n      content: messageContent,\n      type: 'CHAT'\n    }; // send response to backend through websocket using STOMP\n\n    stompClient.send(\"\".concat(topic, \"/sendMessage\"), {}, JSON.stringify(chatMessage));\n  }\n} // handle received messages from backend\n// here I will display  received message on messageBox \n\nexport function onMessageReceived(payload) {\n  var message = JSON.parse(payload.body);\n  handlers.forEach(function (handler) {\n    return handler(JSON.parse(payload.body));\n  });\n  console.log(message); // Chat.refreshMessages(message);\n  // messageHandler(message);\n}","map":{"version":3,"sources":["C:/Ghub/freelancer_portal/Frontend/src/util/ws.js"],"names":["SockJS","Stomp","React","useState","useEffect","Chat","refreshMessages","stompClient","handlers","currentSubscription","messageHandler","topic","username","roomId","connect","userName","roomID","socket","over","debug","onConnected","onError","console","log","addHandler","handler","push","disconnect","setMessageHandler","enterRoom","error","newRoomId","unsubscribe","subscribe","onMessageReceived","send","JSON","stringify","sender","type","sendMessageToServer","message","messageContent","text","chatMessage","content","payload","parse","body","forEach"],"mappings":"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","sourcesContent":["import SockJS from 'sockjs-client'\r\nimport { Stomp } from '@stomp/stompjs'\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {Chat, refreshMessages} from '../components/Chat/Chat';\r\n// Here is code responsible for websockets functionality\r\n// like send message, handle websocket, connect and disconnect\r\n\r\nlet stompClient = null\r\nconst handlers = []\r\nlet currentSubscription;\r\nlet messageHandler = null;\r\n\r\nlet topic = null;\r\nlet username = null;\r\nlet roomId = null;\r\n  \r\n\r\nexport function connect(userName, roomID) {\r\n    username = userName;\r\n    roomId = roomID;\r\n        \r\n    const socket = new SockJS('http://localhost:8080/ownsite') // connecting to the Spring server\r\n    stompClient = Stomp.over(socket)\r\n    stompClient.debug = () => {}\r\n    // stompClient.connect({}, frame => {\r\n    //     stompClient.subscribe('/topic/method', message => {\r\n    //         handlers.forEach(handler => handler(JSON.parse(message.body)))\r\n    //         console.log(message)\r\n    //     })\r\n    // })\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n    console.log('Connected')\r\n}\r\n\r\nexport function addHandler(handler) {\r\n    handlers.push(handler)\r\n}\r\n\r\nexport function disconnect() {\r\n    if (stompClient !== null) {\r\n        stompClient.disconnect()\r\n    }\r\n    console.log(\"Disconnected\")\r\n}\r\n\r\n\r\nexport function setMessageHandler(messageHandler){\r\n  this.messageHandler = messageHandler; \r\n}\r\n\r\n\r\nexport function onConnected() {\r\n    enterRoom(roomId);\r\n}\r\n\r\n\r\nexport function onError(error) {\r\n}\r\n\r\n  \r\n// Leave the current room and enter a new one.\r\nfunction enterRoom(newRoomId) {\r\n    roomId = newRoomId;\r\n    topic = `/app/chat/${newRoomId}`; // form a address to send for new room\r\n\r\n    if (currentSubscription) {\r\n        currentSubscription.unsubscribe();\r\n    }\r\n    // establish subscription on specified address \"/chat-channel/${roomId}\"\r\n    // and attach handler onMessageReceived()\r\n    // It means this handler will process received messages at that address\r\n    currentSubscription = stompClient.subscribe(`/chat-channel/${roomId}`, onMessageReceived);\r\n\r\n    // send request for joining current user in chatroom \r\n    stompClient.send(`${topic}/addUser`,\r\n        {},\r\n        JSON.stringify({sender: username, type: 'JOIN'})\r\n    );\r\n}\r\n\r\n\r\n\r\n// send messages to server (backend)\r\nexport function sendMessageToServer(message) {\r\n    let messageContent = message.text;\r\n\r\n      // if it's just conversation message, then create response and send it to backend\r\n    if (messageContent && stompClient) {\r\n      var chatMessage = {\r\n        sender: username,\r\n        content: messageContent,\r\n        type: 'CHAT'\r\n      };\r\n      // send response to backend through websocket using STOMP\r\n      stompClient.send(`${topic}/sendMessage`, {}, JSON.stringify(chatMessage));\r\n    }\r\n  }\r\n\r\n\r\n  \r\n// handle received messages from backend\r\n// here I will display  received message on messageBox \r\nexport function onMessageReceived(payload) {\r\n    var message = JSON.parse(payload.body);\r\n    handlers.forEach(handler => handler(JSON.parse(payload.body)))\r\n    console.log(message);\r\n    // Chat.refreshMessages(message);\r\n    // messageHandler(message);\r\n \r\n  }\r\n  \r\n"]},"metadata":{},"sourceType":"module"}