{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs'; // Here is code responsible for websockets functionality\n// like send message, handle websocket, connect and disconnect\n\nvar stompClient = null;\nvar handlers = [];\nvar currentSubscription;\nvar topic = null;\nvar username = null;\nvar roomId = null;\nexport function connect(userName, roomId) {\n  // username = nameInput.val().trim();\n  username = userName;\n  roomId = roomId;\n  Cookies.set('name', username);\n  var socket = new SockJS('http://localhost:8080/ownsite'); // connecting to the Spring server\n\n  stompClient = Stomp.over(socket);\n\n  stompClient.debug = function () {}; // stompClient.connect({}, frame => {\n  //     stompClient.subscribe('/topic/method', message => {\n  //         handlers.forEach(handler => handler(JSON.parse(message.body)))\n  //         console.log(message)\n  //     })\n  // })\n\n\n  stompClient.connect({}, onConnected, onError);\n  console.log('Connected');\n}\nexport function addHandler(handler) {\n  handlers.push(handler);\n}\nexport function disconnect() {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n  }\n\n  console.log(\"Disconnected\");\n}\nexport function sendMsg(message) {\n  stompClient.send(\"/app/hello\", {}, JSON.stringify(message)); // send message on specified address\n\n  console.log(\"Sent\");\n} // first function for set connection \n\nexport function connect1(event) {\n  username = nameInput.val().trim();\n  Cookies.set('name', username);\n\n  if (username) {\n    //   usernamePage.classList.add('hidden');\n    //   chatPage.classList.remove('hidden');\n    //   var socket = new SockJS('/ws');\n    //   stompClient = Stomp.over(socket);\n    stompClient.connect({}, onConnected, onError);\n  }\n\n  event.preventDefault();\n}\nexport function onConnected() {\n  // enterRoom(roomInput.val());\n  enterRoom(rommId);\n  connectingElement.classList.add('hidden');\n}\nexport function onError(error) {\n  connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\n  connectingElement.style.color = 'red';\n} // Leave the current room and enter a new one.\n\nfunction enterRoom(newRoomId) {\n  roomId = newRoomId;\n  Cookies.set('roomId', roomId); // roomIdDisplay.textContent = roomId; // just displaying by Jquery way\n\n  topic = \"/app/chat/\".concat(newRoomId); // form a address to send for new room\n\n  if (currentSubscription) {\n    currentSubscription.unsubscribe();\n  } // establish subscription on specified address \"/chat-channel/${roomId}\"\n  // and attach handler onMessageReceived()\n  // It means this handler will process received messages at that address\n\n\n  currentSubscription = stompClient.subscribe(\"/chat-channel/\".concat(roomId), onMessageReceived); // send request for joining current user in chatroom \n\n  stompClient.send(\"\".concat(topic, \"/addUser\"), {}, JSON.stringify({\n    sender: username,\n    type: 'JOIN'\n  }));\n} // send messages to server (backend)\n\n\nexport function sendMessage(event) {\n  var messageContent = messageInput.value.trim(); // insert message content\n  // will change code below \n\n  if (messageContent.startsWith('/join ')) {\n    var newRoomId = messageContent.substring('/join '.length);\n    enterRoom(newRoomId);\n\n    while (messageArea.firstChild) {\n      messageArea.removeChild(messageArea.firstChild);\n    } // if it's just conversation message, then create response and send it to backend\n\n  } else if (messageContent && stompClient) {\n    var chatMessage = {\n      sender: username,\n      content: messageInput.value,\n      type: 'CHAT'\n    }; // send response to backend through websocket using STOMP\n\n    stompClient.send(\"\".concat(topic, \"/sendMessage\"), {}, JSON.stringify(chatMessage));\n  }\n\n  messageInput.value = '';\n  event.preventDefault();\n} // handle received messages from backend\n\nexport function onMessageReceived(payload) {\n  var message = JSON.parse(payload.body);\n  var messageElement = document.createElement('li'); // if it's JOIN message\n\n  if (message.type == 'JOIN') {\n    messageElement.classList.add('event-message');\n    message.content = message.sender + ' joined!'; // if it's LEAVE message\n  } else if (message.type == 'LEAVE') {\n    messageElement.classList.add('event-message');\n    message.content = message.sender + ' left!'; // if it's just conversation message\n  } else {\n    messageElement.classList.add('chat-message');\n    var avatarElement = document.createElement('i');\n    var avatarText = document.createTextNode(message.sender[0]);\n    avatarElement.appendChild(avatarText);\n    avatarElement.style['background-color'] = getAvatarColor(message.sender);\n    messageElement.appendChild(avatarElement);\n    var usernameElement = document.createElement('span');\n    var usernameText = document.createTextNode(message.sender);\n    usernameElement.appendChild(usernameText);\n    messageElement.appendChild(usernameElement);\n  } // display message on panel (redundant, because it's JQuery)\n\n\n  var textElement = document.createElement('p');\n  var messageText = document.createTextNode(message.content);\n  textElement.appendChild(messageText);\n  messageElement.appendChild(textElement);\n  messageArea.appendChild(messageElement);\n  messageArea.scrollTop = messageArea.scrollHeight;\n}","map":{"version":3,"sources":["C:/Ghub/freelancer_portal/Frontend/src/util/ws.js"],"names":["SockJS","Stomp","stompClient","handlers","currentSubscription","topic","username","roomId","connect","userName","Cookies","set","socket","over","debug","onConnected","onError","console","log","addHandler","handler","push","disconnect","sendMsg","message","send","JSON","stringify","connect1","event","nameInput","val","trim","preventDefault","enterRoom","rommId","connectingElement","classList","add","error","textContent","style","color","newRoomId","unsubscribe","subscribe","onMessageReceived","sender","type","sendMessage","messageContent","messageInput","value","startsWith","substring","length","messageArea","firstChild","removeChild","chatMessage","content","payload","parse","body","messageElement","document","createElement","avatarElement","avatarText","createTextNode","appendChild","getAvatarColor","usernameElement","usernameText","textElement","messageText","scrollTop","scrollHeight"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,eAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB,C,CAEA;AACA;;AAEA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAMC,QAAQ,GAAG,EAAjB;AACA,IAAIC,mBAAJ;AAEA,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,IAAIC,MAAM,GAAG,IAAb;AAGA,OAAO,SAASC,OAAT,CAAiBC,QAAjB,EAA2BF,MAA3B,EAAmC;AACtC;AACAD,EAAAA,QAAQ,GAAGG,QAAX;AACAF,EAAAA,MAAM,GAAGA,MAAT;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,QAApB;AAEA,MAAMM,MAAM,GAAG,IAAIZ,MAAJ,CAAW,+BAAX,CAAf,CAPsC,CAOqB;;AAC3DE,EAAAA,WAAW,GAAGD,KAAK,CAACY,IAAN,CAAWD,MAAX,CAAd;;AACAV,EAAAA,WAAW,CAACY,KAAZ,GAAoB,YAAM,CAAE,CAA5B,CATsC,CAUtC;AACA;AACA;AACA;AACA;AACA;;;AAEAZ,EAAAA,WAAW,CAACM,OAAZ,CAAoB,EAApB,EAAwBO,WAAxB,EAAqCC,OAArC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;AAED,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAChCjB,EAAAA,QAAQ,CAACkB,IAAT,CAAcD,OAAd;AACH;AAED,OAAO,SAASE,UAAT,GAAsB;AACzB,MAAIpB,WAAW,KAAK,IAApB,EAA0B;AACtBA,IAAAA,WAAW,CAACoB,UAAZ;AACH;;AACDL,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AAED,OAAO,SAASK,OAAT,CAAiBC,OAAjB,EAA0B;AAC7BtB,EAAAA,WAAW,CAACuB,IAAZ,CAAiB,YAAjB,EAA+B,EAA/B,EAAmCC,IAAI,CAACC,SAAL,CAAeH,OAAf,CAAnC,EAD6B,CAC+B;;AAC5DP,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH,C,CAMD;;AACA,OAAO,SAASU,QAAT,CAAkBC,KAAlB,EAAyB;AAC5BvB,EAAAA,QAAQ,GAAGwB,SAAS,CAACC,GAAV,GAAgBC,IAAhB,EAAX;AACAtB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,QAApB;;AACA,MAAIA,QAAJ,EAAc;AACd;AACA;AAEA;AACA;AAGEJ,IAAAA,WAAW,CAACM,OAAZ,CAAoB,EAApB,EAAwBO,WAAxB,EAAqCC,OAArC;AACD;;AACDa,EAAAA,KAAK,CAACI,cAAN;AACH;AAGD,OAAO,SAASlB,WAAT,GAAuB;AAC1B;AACAmB,EAAAA,SAAS,CAACC,MAAD,CAAT;AACAC,EAAAA,iBAAiB,CAACC,SAAlB,CAA4BC,GAA5B,CAAgC,QAAhC;AACH;AAGD,OAAO,SAAStB,OAAT,CAAiBuB,KAAjB,EAAwB;AAC3BH,EAAAA,iBAAiB,CAACI,WAAlB,GAAgC,+EAAhC;AACAJ,EAAAA,iBAAiB,CAACK,KAAlB,CAAwBC,KAAxB,GAAgC,KAAhC;AACH,C,CAGD;;AACA,SAASR,SAAT,CAAmBS,SAAnB,EAA8B;AAC1BpC,EAAAA,MAAM,GAAGoC,SAAT;AACAjC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,MAAtB,EAF0B,CAG1B;;AACAF,EAAAA,KAAK,uBAAgBsC,SAAhB,CAAL,CAJ0B,CAIQ;;AAElC,MAAIvC,mBAAJ,EAAyB;AACrBA,IAAAA,mBAAmB,CAACwC,WAApB;AACH,GARyB,CAS1B;AACA;AACA;;;AACAxC,EAAAA,mBAAmB,GAAGF,WAAW,CAAC2C,SAAZ,yBAAuCtC,MAAvC,GAAiDuC,iBAAjD,CAAtB,CAZ0B,CAc1B;;AACA5C,EAAAA,WAAW,CAACuB,IAAZ,WAAoBpB,KAApB,eACI,EADJ,EAEIqB,IAAI,CAACC,SAAL,CAAe;AAACoB,IAAAA,MAAM,EAAEzC,QAAT;AAAmB0C,IAAAA,IAAI,EAAE;AAAzB,GAAf,CAFJ;AAIH,C,CAID;;;AACA,OAAO,SAASC,WAAT,CAAqBpB,KAArB,EAA4B;AAC/B,MAAIqB,cAAc,GAAGC,YAAY,CAACC,KAAb,CAAmBpB,IAAnB,EAArB,CAD+B,CACiB;AAEhD;;AACA,MAAIkB,cAAc,CAACG,UAAf,CAA0B,QAA1B,CAAJ,EAAyC;AACvC,QAAIV,SAAS,GAAGO,cAAc,CAACI,SAAf,CAAyB,SAASC,MAAlC,CAAhB;AACArB,IAAAA,SAAS,CAACS,SAAD,CAAT;;AACA,WAAOa,WAAW,CAACC,UAAnB,EAA+B;AAC7BD,MAAAA,WAAW,CAACE,WAAZ,CAAwBF,WAAW,CAACC,UAApC;AACD,KALsC,CAOvC;;AACD,GARD,MAQO,IAAIP,cAAc,IAAIhD,WAAtB,EAAmC;AACxC,QAAIyD,WAAW,GAAG;AAChBZ,MAAAA,MAAM,EAAEzC,QADQ;AAEhBsD,MAAAA,OAAO,EAAET,YAAY,CAACC,KAFN;AAGhBJ,MAAAA,IAAI,EAAE;AAHU,KAAlB,CADwC,CAMxC;;AACA9C,IAAAA,WAAW,CAACuB,IAAZ,WAAoBpB,KAApB,mBAAyC,EAAzC,EAA6CqB,IAAI,CAACC,SAAL,CAAegC,WAAf,CAA7C;AACD;;AACDR,EAAAA,YAAY,CAACC,KAAb,GAAqB,EAArB;AACAvB,EAAAA,KAAK,CAACI,cAAN;AACD,C,CAIH;;AACA,OAAO,SAASa,iBAAT,CAA2Be,OAA3B,EAAoC;AACvC,MAAIrC,OAAO,GAAGE,IAAI,CAACoC,KAAL,CAAWD,OAAO,CAACE,IAAnB,CAAd;AAEA,MAAIC,cAAc,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAArB,CAHuC,CAKvC;;AACA,MAAI1C,OAAO,CAACwB,IAAR,IAAgB,MAApB,EAA4B;AAC1BgB,IAAAA,cAAc,CAAC3B,SAAf,CAAyBC,GAAzB,CAA6B,eAA7B;AACAd,IAAAA,OAAO,CAACoC,OAAR,GAAkBpC,OAAO,CAACuB,MAAR,GAAiB,UAAnC,CAF0B,CAI1B;AACD,GALD,MAKO,IAAIvB,OAAO,CAACwB,IAAR,IAAgB,OAApB,EAA6B;AAClCgB,IAAAA,cAAc,CAAC3B,SAAf,CAAyBC,GAAzB,CAA6B,eAA7B;AACAd,IAAAA,OAAO,CAACoC,OAAR,GAAkBpC,OAAO,CAACuB,MAAR,GAAiB,QAAnC,CAFkC,CAIlC;AACD,GALM,MAKA;AACLiB,IAAAA,cAAc,CAAC3B,SAAf,CAAyBC,GAAzB,CAA6B,cAA7B;AAEA,QAAI6B,aAAa,GAAGF,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAApB;AACA,QAAIE,UAAU,GAAGH,QAAQ,CAACI,cAAT,CAAwB7C,OAAO,CAACuB,MAAR,CAAe,CAAf,CAAxB,CAAjB;AACAoB,IAAAA,aAAa,CAACG,WAAd,CAA0BF,UAA1B;AACAD,IAAAA,aAAa,CAAC1B,KAAd,CAAoB,kBAApB,IAA0C8B,cAAc,CAAC/C,OAAO,CAACuB,MAAT,CAAxD;AAEAiB,IAAAA,cAAc,CAACM,WAAf,CAA2BH,aAA3B;AAEA,QAAIK,eAAe,GAAGP,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAtB;AACA,QAAIO,YAAY,GAAGR,QAAQ,CAACI,cAAT,CAAwB7C,OAAO,CAACuB,MAAhC,CAAnB;AACAyB,IAAAA,eAAe,CAACF,WAAhB,CAA4BG,YAA5B;AACAT,IAAAA,cAAc,CAACM,WAAf,CAA2BE,eAA3B;AACD,GA9BsC,CAgCvC;;;AACA,MAAIE,WAAW,GAAGT,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAlB;AACA,MAAIS,WAAW,GAAGV,QAAQ,CAACI,cAAT,CAAwB7C,OAAO,CAACoC,OAAhC,CAAlB;AACAc,EAAAA,WAAW,CAACJ,WAAZ,CAAwBK,WAAxB;AAEAX,EAAAA,cAAc,CAACM,WAAf,CAA2BI,WAA3B;AAEAlB,EAAAA,WAAW,CAACc,WAAZ,CAAwBN,cAAxB;AACAR,EAAAA,WAAW,CAACoB,SAAZ,GAAwBpB,WAAW,CAACqB,YAApC;AACD","sourcesContent":["import SockJS from 'sockjs-client'\r\nimport { Stomp } from '@stomp/stompjs'\r\n\r\n// Here is code responsible for websockets functionality\r\n// like send message, handle websocket, connect and disconnect\r\n\r\nlet stompClient = null\r\nconst handlers = []\r\nlet currentSubscription;\r\n\r\nlet topic = null;\r\nlet username = null;\r\nlet roomId = null;\r\n\r\n\r\nexport function connect(userName, roomId) {\r\n    // username = nameInput.val().trim();\r\n    username = userName;\r\n    roomId = roomId;\r\n    \r\n    Cookies.set('name', username);\r\n    \r\n    const socket = new SockJS('http://localhost:8080/ownsite') // connecting to the Spring server\r\n    stompClient = Stomp.over(socket)\r\n    stompClient.debug = () => {}\r\n    // stompClient.connect({}, frame => {\r\n    //     stompClient.subscribe('/topic/method', message => {\r\n    //         handlers.forEach(handler => handler(JSON.parse(message.body)))\r\n    //         console.log(message)\r\n    //     })\r\n    // })\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n    console.log('Connected')\r\n}\r\n\r\nexport function addHandler(handler) {\r\n    handlers.push(handler)\r\n}\r\n\r\nexport function disconnect() {\r\n    if (stompClient !== null) {\r\n        stompClient.disconnect()\r\n    }\r\n    console.log(\"Disconnected\")\r\n}\r\n\r\nexport function sendMsg(message) {\r\n    stompClient.send(\"/app/hello\", {}, JSON.stringify(message)) // send message on specified address\r\n    console.log(\"Sent\")\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// first function for set connection \r\nexport function connect1(event) {\r\n    username = nameInput.val().trim();\r\n    Cookies.set('name', username);\r\n    if (username) {\r\n    //   usernamePage.classList.add('hidden');\r\n    //   chatPage.classList.remove('hidden');\r\n  \r\n    //   var socket = new SockJS('/ws');\r\n    //   stompClient = Stomp.over(socket);\r\n  \r\n\r\n      stompClient.connect({}, onConnected, onError);\r\n    }\r\n    event.preventDefault();\r\n}\r\n\r\n\r\nexport function onConnected() {\r\n    // enterRoom(roomInput.val());\r\n    enterRoom(rommId);\r\n    connectingElement.classList.add('hidden');\r\n}\r\n\r\n\r\nexport function onError(error) {\r\n    connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\r\n    connectingElement.style.color = 'red';\r\n}\r\n\r\n  \r\n// Leave the current room and enter a new one.\r\nfunction enterRoom(newRoomId) {\r\n    roomId = newRoomId;\r\n    Cookies.set('roomId', roomId);\r\n    // roomIdDisplay.textContent = roomId; // just displaying by Jquery way\r\n    topic = `/app/chat/${newRoomId}`; // form a address to send for new room\r\n\r\n    if (currentSubscription) {\r\n        currentSubscription.unsubscribe();\r\n    }\r\n    // establish subscription on specified address \"/chat-channel/${roomId}\"\r\n    // and attach handler onMessageReceived()\r\n    // It means this handler will process received messages at that address\r\n    currentSubscription = stompClient.subscribe(`/chat-channel/${roomId}`, onMessageReceived);\r\n\r\n    // send request for joining current user in chatroom \r\n    stompClient.send(`${topic}/addUser`,\r\n        {},\r\n        JSON.stringify({sender: username, type: 'JOIN'})\r\n    );\r\n}\r\n\r\n\r\n\r\n// send messages to server (backend)\r\nexport function sendMessage(event) {\r\n    var messageContent = messageInput.value.trim(); // insert message content\r\n    \r\n    // will change code below \r\n    if (messageContent.startsWith('/join ')) {\r\n      var newRoomId = messageContent.substring('/join '.length);\r\n      enterRoom(newRoomId);\r\n      while (messageArea.firstChild) {\r\n        messageArea.removeChild(messageArea.firstChild);\r\n      }\r\n  \r\n      // if it's just conversation message, then create response and send it to backend\r\n    } else if (messageContent && stompClient) {\r\n      var chatMessage = {\r\n        sender: username,\r\n        content: messageInput.value,\r\n        type: 'CHAT'\r\n      };\r\n      // send response to backend through websocket using STOMP\r\n      stompClient.send(`${topic}/sendMessage`, {}, JSON.stringify(chatMessage));\r\n    }\r\n    messageInput.value = '';\r\n    event.preventDefault();\r\n  }\r\n\r\n\r\n  \r\n// handle received messages from backend\r\nexport function onMessageReceived(payload) {\r\n    var message = JSON.parse(payload.body);\r\n\r\n    var messageElement = document.createElement('li');\r\n    \r\n    // if it's JOIN message\r\n    if (message.type == 'JOIN') {\r\n      messageElement.classList.add('event-message');\r\n      message.content = message.sender + ' joined!';\r\n\r\n      // if it's LEAVE message\r\n    } else if (message.type == 'LEAVE') {\r\n      messageElement.classList.add('event-message');\r\n      message.content = message.sender + ' left!';\r\n\r\n      // if it's just conversation message\r\n    } else {\r\n      messageElement.classList.add('chat-message');\r\n  \r\n      var avatarElement = document.createElement('i');\r\n      var avatarText = document.createTextNode(message.sender[0]);\r\n      avatarElement.appendChild(avatarText);\r\n      avatarElement.style['background-color'] = getAvatarColor(message.sender);\r\n  \r\n      messageElement.appendChild(avatarElement);\r\n  \r\n      var usernameElement = document.createElement('span');\r\n      var usernameText = document.createTextNode(message.sender);\r\n      usernameElement.appendChild(usernameText);\r\n      messageElement.appendChild(usernameElement);\r\n    }\r\n  \r\n    // display message on panel (redundant, because it's JQuery)\r\n    var textElement = document.createElement('p');\r\n    var messageText = document.createTextNode(message.content);\r\n    textElement.appendChild(messageText);\r\n  \r\n    messageElement.appendChild(textElement);\r\n  \r\n    messageArea.appendChild(messageElement);\r\n    messageArea.scrollTop = messageArea.scrollHeight;\r\n  }\r\n  \r\n"]},"metadata":{},"sourceType":"module"}