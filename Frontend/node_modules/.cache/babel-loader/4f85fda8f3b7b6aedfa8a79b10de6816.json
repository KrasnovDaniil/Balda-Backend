{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Ghub\\\\freelancer_portal\\\\new-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Ghub\\\\freelancer_portal\\\\new-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Ghub\\\\freelancer_portal\\\\new-app\\\\src\\\\components\\\\Chat\\\\Chat.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport SocketConnection from './SocketConnection';\nimport './Chat.css';\n\nvar Chat = function Chat(_ref) {\n  var location = _ref.location;\n  var socketCon = new SocketConnection(1); // here are 'react useState hooks' it's kind of a class properties but for functional components \n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      room = _useState4[0],\n      setRoom = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      users = _useState6[0],\n      setUsers = _useState6[1]; // messageObj represents message data namely text and sender name \n\n\n  var _useState7 = useState({\n    text: 'qwe',\n    user: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messageObj = _useState8[0],\n      setMessageObj = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      message = _useState10[0],\n      setMessage = _useState10[1]; // just text of current typed message\n\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      messages = _useState12[0],\n      setMessages = _useState12[1];\n\n  var ENDPOINT = \"http://localhost:8080\";\n  useEffect(function () {\n    var _queryString$parse = queryString.parse(location.search),\n        name = _queryString$parse.name,\n        room = _queryString$parse.room; // parse specified data from URL to pair (tuple)\n    // socket = io(ENDPOINT);\n\n\n    setRoom(room); // set user name and his room\n\n    setName(name); // socketCon.connect();\n    // socket.emit('join', { name, room }, (error) => {\n    //   if(error) {\n    //     alert(error);\n    //   }\n    // });\n\n    var greetingMsg = {\n      text: \"Hello \".concat(name),\n      user: 'admin'\n    }; // just a greeting mesage\n\n    setMessages(function (messages) {\n      return [].concat(_toConsumableArray(messages), [greetingMsg]);\n    }); // add greeting message from admin\n  }, [ENDPOINT, location.search]); // useEffect(() => {\n  //   socket.on('message', message => {\n  //     setMessages(messages => [ ...messages, message ]);\n  //   });\n  //   socket.on(\"roomData\", ({ users }) => {\n  //     setUsers(users);\n  //   });\n  // }, []);\n  // Helping method for saving message and messageObj\n  // I united two setters in one method, because, as I noticed, they don't work properly separately in Input.js\n  // and I don't know why may be here are some problems with asynchronous. \n\n  var saveBoth = function saveBoth(value) {\n    setMessage(value);\n    setMessageObj(function () {\n      return {\n        text: value,\n        user: name\n      };\n    });\n  }; // method of sending message\n\n\n  var sendMessage = function sendMessage(event) {\n    event.preventDefault(); // here may be other logic for message validation\n\n    if (message) {\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [messageObj]);\n      });\n      setMessage(function () {\n        return '';\n      }); // here should be sending message to backend like below\n      // stompClient.send(\"/app/message\", {}, JSON.stringify({'name':$(\"#name\").val()}));\n      // socketCon.sendMsg(message);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    sendMessage: sendMessage,\n    saveBoth: saveBoth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Ghub/freelancer_portal/new-app/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","Messages","InfoBar","Input","SocketConnection","Chat","location","socketCon","name","setName","room","setRoom","users","setUsers","text","user","messageObj","setMessageObj","message","setMessage","messages","setMessages","ENDPOINT","parse","search","greetingMsg","saveBoth","value","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\n\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport SocketConnection from './SocketConnection';\n\nimport './Chat.css';\n\n\nconst Chat = ({ location }) => {\n  let socketCon = new SocketConnection(1);\n  // here are 'react useState hooks' it's kind of a class properties but for functional components \n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  // messageObj represents message data namely text and sender name \n  const [messageObj, setMessageObj] = useState({ text:'qwe', user:'' });\n  const [message, setMessage] = useState(''); // just text of current typed message\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = \"http://localhost:8080\";\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);  // parse specified data from URL to pair (tuple)\n    // socket = io(ENDPOINT);\n    setRoom(room); // set user name and his room\n    setName(name);\n    // socketCon.connect();\n    // socket.emit('join', { name, room }, (error) => {\n    //   if(error) {\n    //     alert(error);\n    //   }\n    // });\n    const greetingMsg = {text: `Hello ${name}`, user: 'admin'}; // just a greeting mesage\n    setMessages((messages) => [...messages, greetingMsg]); // add greeting message from admin\n  }, [ENDPOINT, location.search]);\n  \n  // useEffect(() => {\n  //   socket.on('message', message => {\n  //     setMessages(messages => [ ...messages, message ]);\n  //   });\n    \n  //   socket.on(\"roomData\", ({ users }) => {\n  //     setUsers(users);\n  //   });\n  // }, []);\n\n  // Helping method for saving message and messageObj\n  // I united two setters in one method, because, as I noticed, they don't work properly separately in Input.js\n  // and I don't know why may be here are some problems with asynchronous. \n  const saveBoth = (value) => {\n    setMessage(value);\n    setMessageObj(() =>({\n      text: value,\n      user: name,\n    }));\n  }\n  \n  // method of sending message\n  const sendMessage = (event) => {  \n    event.preventDefault();\n    // here may be other logic for message validation\n    if (message) {\n      setMessages((messages) => [...messages, messageObj]); \n      setMessage(()=>'')\n\n      // here should be sending message to backend like below\n      // stompClient.send(\"/app/message\", {}, JSON.stringify({'name':$(\"#name\").val()}));\n      // socketCon.sendMsg(message);\n      \n    }\n  };\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input message={message} sendMessage={sendMessage} saveBoth={saveBoth} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}