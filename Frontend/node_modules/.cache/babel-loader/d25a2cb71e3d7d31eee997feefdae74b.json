{"ast":null,"code":"import SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs'; // Here is code responsible for websockets functionality\n// like send message, handle websocket, connect and disconnect\n\nvar stompClient = null;\nvar handlers = [];\nvar currentSubscription;\nvar topic = null;\nvar username = null;\nvar roomId = null;\nexport function connect(userName, roomId) {\n  // username = nameInput.val().trim();\n  username = userName;\n  roomId = roomId; // Cookies.set('name', username);\n\n  var socket = new SockJS('http://localhost:8080/ownsite'); // connecting to the Spring server\n\n  stompClient = Stomp.over(socket);\n\n  stompClient.debug = function () {}; // stompClient.connect({}, frame => {\n  //     stompClient.subscribe('/topic/method', message => {\n  //         handlers.forEach(handler => handler(JSON.parse(message.body)))\n  //         console.log(message)\n  //     })\n  // })\n\n\n  stompClient.connect({}, onConnected, onError);\n  console.log('Connected');\n}\nexport function addHandler(handler) {\n  handlers.push(handler);\n}\nexport function disconnect() {\n  if (stompClient !== null) {\n    stompClient.disconnect();\n  }\n\n  console.log(\"Disconnected\");\n}\nexport function sendMsg(message) {\n  stompClient.send(\"/app/hello\", {}, JSON.stringify(message)); // send message on specified address\n\n  console.log(\"Sent\");\n} // first function for set connection \n\nexport function connect1(event) {\n  // username = nameInput.val().trim();\n  // Cookies.set('name', username);\n  if (username) {\n    //   usernamePage.classList.add('hidden');\n    //   chatPage.classList.remove('hidden');\n    //   var socket = new SockJS('/ws');\n    //   stompClient = Stomp.over(socket);\n    stompClient.connect({}, onConnected, onError);\n  }\n\n  event.preventDefault();\n}\nexport function onConnected() {\n  // enterRoom(roomInput.val());\n  enterRoom(roomId); // connectingElement.classList.add('hidden');\n}\nexport function onError(error) {// connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\n  // connectingElement.style.color = 'red';\n} // Leave the current room and enter a new one.\n\nfunction enterRoom(newRoomId) {\n  roomId = newRoomId; // Cookies.set('roomId', roomId);\n  // roomIdDisplay.textContent = roomId; // just displaying by Jquery way\n\n  topic = \"/app/chat/\".concat(newRoomId); // form a address to send for new room\n\n  if (currentSubscription) {\n    currentSubscription.unsubscribe();\n  } // establish subscription on specified address \"/chat-channel/${roomId}\"\n  // and attach handler onMessageReceived()\n  // It means this handler will process received messages at that address\n\n\n  currentSubscription = stompClient.subscribe(\"/chat-channel/\".concat(roomId), onMessageReceived); // send request for joining current user in chatroom \n\n  stompClient.send(\"\".concat(topic, \"/addUser\"), {}, JSON.stringify({\n    sender: username,\n    type: 'JOIN'\n  }));\n} // send messages to server (backend)\n// export function sendMessage(event) {\n//     var messageContent = messageInput.value.trim(); // insert message content\n//     // will change code below \n//     if (messageContent.startsWith('/join ')) {\n//       var newRoomId = messageContent.substring('/join '.length);\n//       enterRoom(newRoomId);\n//       while (messageArea.firstChild) {\n//         messageArea.removeChild(messageArea.firstChild);\n//       }\n//       // if it's just conversation message, then create response and send it to backend\n//     } else if (messageContent && stompClient) {\n//       var chatMessage = {\n//         sender: username,\n//         content: messageInput.value,\n//         type: 'CHAT'\n//       };\n//       // send response to backend through websocket using STOMP\n//       stompClient.send(`${topic}/sendMessage`, {}, JSON.stringify(chatMessage));\n//     }\n//     messageInput.value = '';\n//     event.preventDefault();\n//   }\n// handle received messages from backend\n\n\nexport function onMessageReceived(payload) {\n  var message = JSON.parse(payload.body);\n  console.log(message); // var messageElement = document.createElement('li');\n  // if it's JOIN message\n  // if (message.type == 'JOIN') {\n  //   messageElement.classList.add('event-message');\n  //   message.content = message.sender + ' joined!';\n  //   // if it's LEAVE message\n  // } else if (message.type == 'LEAVE') {\n  //   messageElement.classList.add('event-message');\n  //   message.content = message.sender + ' left!';\n  //   // if it's just conversation message\n  // } else {\n  //   messageElement.classList.add('chat-message');\n  //   var avatarElement = document.createElement('i');\n  //   var avatarText = document.createTextNode(message.sender[0]);\n  //   avatarElement.appendChild(avatarText);\n  //   avatarElement.style['background-color'] = getAvatarColor(message.sender);\n  //   messageElement.appendChild(avatarElement);\n  //   var usernameElement = document.createElement('span');\n  //   var usernameText = document.createTextNode(message.sender);\n  //   usernameElement.appendChild(usernameText);\n  //   messageElement.appendChild(usernameElement);\n  // }\n  // // display message on panel (redundant, because it's JQuery)\n  // var textElement = document.createElement('p');\n  // var messageText = document.createTextNode(message.content);\n  // textElement.appendChild(messageText);\n  // messageElement.appendChild(textElement);\n  // messageArea.appendChild(messageElement);\n  // messageArea.scrollTop = messageArea.scrollHeight;\n}","map":{"version":3,"sources":["C:/Ghub/freelancer_portal/Frontend/src/util/ws.js"],"names":["SockJS","Stomp","stompClient","handlers","currentSubscription","topic","username","roomId","connect","userName","socket","over","debug","onConnected","onError","console","log","addHandler","handler","push","disconnect","sendMsg","message","send","JSON","stringify","connect1","event","preventDefault","enterRoom","error","newRoomId","unsubscribe","subscribe","onMessageReceived","sender","type","payload","parse","body"],"mappings":"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","sourcesContent":["import SockJS from 'sockjs-client'\r\nimport { Stomp } from '@stomp/stompjs'\r\n\r\n// Here is code responsible for websockets functionality\r\n// like send message, handle websocket, connect and disconnect\r\n\r\nlet stompClient = null\r\nconst handlers = []\r\nlet currentSubscription;\r\n\r\nlet topic = null;\r\nlet username = null;\r\nlet roomId = null;\r\n\r\n\r\nexport function connect(userName, roomId) {\r\n    // username = nameInput.val().trim();\r\n    username = userName;\r\n    roomId = roomId;\r\n    \r\n    // Cookies.set('name', username);\r\n    \r\n    const socket = new SockJS('http://localhost:8080/ownsite') // connecting to the Spring server\r\n    stompClient = Stomp.over(socket)\r\n    stompClient.debug = () => {}\r\n    // stompClient.connect({}, frame => {\r\n    //     stompClient.subscribe('/topic/method', message => {\r\n    //         handlers.forEach(handler => handler(JSON.parse(message.body)))\r\n    //         console.log(message)\r\n    //     })\r\n    // })\r\n\r\n    stompClient.connect({}, onConnected, onError);\r\n    console.log('Connected')\r\n}\r\n\r\nexport function addHandler(handler) {\r\n    handlers.push(handler)\r\n}\r\n\r\nexport function disconnect() {\r\n    if (stompClient !== null) {\r\n        stompClient.disconnect()\r\n    }\r\n    console.log(\"Disconnected\")\r\n}\r\n\r\nexport function sendMsg(message) {\r\n    stompClient.send(\"/app/hello\", {}, JSON.stringify(message)) // send message on specified address\r\n    console.log(\"Sent\")\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// first function for set connection \r\nexport function connect1(event) {\r\n    // username = nameInput.val().trim();\r\n    // Cookies.set('name', username);\r\n    if (username) {\r\n    //   usernamePage.classList.add('hidden');\r\n    //   chatPage.classList.remove('hidden');\r\n  \r\n    //   var socket = new SockJS('/ws');\r\n    //   stompClient = Stomp.over(socket);\r\n  \r\n\r\n      stompClient.connect({}, onConnected, onError);\r\n    }\r\n    event.preventDefault();\r\n}\r\n\r\n\r\nexport function onConnected() {\r\n    // enterRoom(roomInput.val());\r\n    enterRoom(roomId);\r\n    // connectingElement.classList.add('hidden');\r\n}\r\n\r\n\r\nexport function onError(error) {\r\n    // connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\r\n    // connectingElement.style.color = 'red';\r\n}\r\n\r\n  \r\n// Leave the current room and enter a new one.\r\nfunction enterRoom(newRoomId) {\r\n    roomId = newRoomId;\r\n    // Cookies.set('roomId', roomId);\r\n    // roomIdDisplay.textContent = roomId; // just displaying by Jquery way\r\n    topic = `/app/chat/${newRoomId}`; // form a address to send for new room\r\n\r\n    if (currentSubscription) {\r\n        currentSubscription.unsubscribe();\r\n    }\r\n    // establish subscription on specified address \"/chat-channel/${roomId}\"\r\n    // and attach handler onMessageReceived()\r\n    // It means this handler will process received messages at that address\r\n    currentSubscription = stompClient.subscribe(`/chat-channel/${roomId}`, onMessageReceived);\r\n\r\n    // send request for joining current user in chatroom \r\n    stompClient.send(`${topic}/addUser`,\r\n        {},\r\n        JSON.stringify({sender: username, type: 'JOIN'})\r\n    );\r\n}\r\n\r\n\r\n\r\n// send messages to server (backend)\r\n// export function sendMessage(event) {\r\n//     var messageContent = messageInput.value.trim(); // insert message content\r\n    \r\n//     // will change code below \r\n//     if (messageContent.startsWith('/join ')) {\r\n//       var newRoomId = messageContent.substring('/join '.length);\r\n//       enterRoom(newRoomId);\r\n//       while (messageArea.firstChild) {\r\n//         messageArea.removeChild(messageArea.firstChild);\r\n//       }\r\n  \r\n//       // if it's just conversation message, then create response and send it to backend\r\n//     } else if (messageContent && stompClient) {\r\n//       var chatMessage = {\r\n//         sender: username,\r\n//         content: messageInput.value,\r\n//         type: 'CHAT'\r\n//       };\r\n//       // send response to backend through websocket using STOMP\r\n//       stompClient.send(`${topic}/sendMessage`, {}, JSON.stringify(chatMessage));\r\n//     }\r\n//     messageInput.value = '';\r\n//     event.preventDefault();\r\n//   }\r\n\r\n\r\n  \r\n// handle received messages from backend\r\nexport function onMessageReceived(payload) {\r\n    var message = JSON.parse(payload.body);\r\n    console.log(message);\r\n    // var messageElement = document.createElement('li');\r\n    \r\n    // if it's JOIN message\r\n    // if (message.type == 'JOIN') {\r\n    //   messageElement.classList.add('event-message');\r\n    //   message.content = message.sender + ' joined!';\r\n\r\n    //   // if it's LEAVE message\r\n    // } else if (message.type == 'LEAVE') {\r\n    //   messageElement.classList.add('event-message');\r\n    //   message.content = message.sender + ' left!';\r\n\r\n    //   // if it's just conversation message\r\n    // } else {\r\n    //   messageElement.classList.add('chat-message');\r\n  \r\n    //   var avatarElement = document.createElement('i');\r\n    //   var avatarText = document.createTextNode(message.sender[0]);\r\n    //   avatarElement.appendChild(avatarText);\r\n    //   avatarElement.style['background-color'] = getAvatarColor(message.sender);\r\n  \r\n    //   messageElement.appendChild(avatarElement);\r\n  \r\n    //   var usernameElement = document.createElement('span');\r\n    //   var usernameText = document.createTextNode(message.sender);\r\n    //   usernameElement.appendChild(usernameText);\r\n    //   messageElement.appendChild(usernameElement);\r\n    // }\r\n  \r\n    // // display message on panel (redundant, because it's JQuery)\r\n    // var textElement = document.createElement('p');\r\n    // var messageText = document.createTextNode(message.content);\r\n    // textElement.appendChild(messageText);\r\n  \r\n    // messageElement.appendChild(textElement);\r\n  \r\n    // messageArea.appendChild(messageElement);\r\n    // messageArea.scrollTop = messageArea.scrollHeight;\r\n  }\r\n  \r\n"]},"metadata":{},"sourceType":"module"}