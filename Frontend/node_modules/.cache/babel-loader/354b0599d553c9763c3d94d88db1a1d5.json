{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Ghub\\\\freelancer_portal\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"C:\\\\Ghub\\\\freelancer_portal\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Ghub\\\\freelancer_portal\\\\Frontend\\\\src\\\\components\\\\Chat\\\\Chat.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport SockJS from 'sockjs-client';\nimport Stomp from '@stomp/stompjs'; // For now here will be commented code, because more likely I will use it in future\n// for properly interacting with websockets\n\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport { sendMessageToServer, connect, setMessageHandler } from '../../util/ws';\nimport './Chat.css';\nexport var Chat = function Chat(_ref) {\n  var location = _ref.location;\n\n  // here are 'react useState hooks' it's kind of a class properties but for functional components \n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      room = _useState4[0],\n      setRoom = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      users = _useState6[0],\n      setUsers = _useState6[1]; // messageObj represents message data namely text and sender name \n\n\n  var _useState7 = useState({\n    text: 'qwe',\n    sender: ''\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messageObj = _useState8[0],\n      setMessageObj = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      message = _useState10[0],\n      setMessage = _useState10[1]; // just text of current typed message\n\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      messages = _useState12[0],\n      setMessages = _useState12[1];\n\n  var ENDPOINT = \"http://localhost:8080\";\n  setMessageHandler(sendMessage);\n  useEffect(function () {\n    var _queryString$parse = queryString.parse(location.search),\n        name = _queryString$parse.name,\n        room = _queryString$parse.room; // parse specified data from URL to pair (tuple)\n\n\n    setRoom(room); // set user name and his room\n\n    setName(name);\n    connect(name, room); // connect to WebSocket\n\n    var greetingMsg = {\n      text: \"Hello \".concat(name),\n      sender: 'admin'\n    }; // just a greeting mesage\n\n    setMessages(function (messages) {\n      return [].concat(_toConsumableArray(messages), [greetingMsg]);\n    }); // add greeting message from admin\n    // sendMessageToServer(greetingMsg);\n  }, [ENDPOINT, location.search]); // Helping method for saving message and messageObj\n  // I united two setters in one method, because, as I noticed, they don't work properly separately in Input.js\n  // and I don't know why may be here are some problems with asynchronous. \n\n  var saveBoth = function saveBoth(value) {\n    setMessage(value);\n    setMessageObj(function () {\n      return {\n        text: value,\n        sender: name\n      };\n    });\n  }; // method of sending message\n\n\n  var sendMessage = function sendMessage(event) {\n    event.preventDefault();\n\n    if (message) {\n      sendMessageToServer({\n        text: message\n      });\n      setMessages(function (messages) {\n        return [].concat(_toConsumableArray(messages), [messageObj]);\n      });\n      setMessage('');\n    }\n  };\n\n  var refreshMessages = function refreshMessages(newMessage) {\n    if (newMessage.sender === name) return;\n    setMessages(function (newMessage) {\n      return [].concat(_toConsumableArray(messages), [newMessage]);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    sendMessage: sendMessage,\n    saveBoth: saveBoth,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n};\nexport default Chat;","map":{"version":3,"sources":["C:/Ghub/freelancer_portal/Frontend/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","SockJS","Stomp","Messages","InfoBar","Input","sendMessageToServer","connect","setMessageHandler","Chat","location","name","setName","room","setRoom","users","setUsers","text","sender","messageObj","setMessageObj","message","setMessage","messages","setMessages","ENDPOINT","sendMessage","parse","search","greetingMsg","saveBoth","value","event","preventDefault","refreshMessages","newMessage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport SockJS from 'sockjs-client';\nimport Stomp from '@stomp/stompjs';\n\n// For now here will be commented code, because more likely I will use it in future\n// for properly interacting with websockets\n\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport {sendMessageToServer, connect, setMessageHandler} from '../../util/ws';\n\nimport './Chat.css';\n\nexport const Chat = ({ location }) => {\n  // here are 'react useState hooks' it's kind of a class properties but for functional components \n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n\n  // messageObj represents message data namely text and sender name \n  const [messageObj, setMessageObj] = useState({ text:'qwe', sender:'' });\n  const [message, setMessage] = useState(''); // just text of current typed message\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = \"http://localhost:8080\";\n  setMessageHandler(sendMessage);\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);  // parse specified data from URL to pair (tuple)\n    setRoom(room); // set user name and his room\n    setName(name);\n    connect(name, room); // connect to WebSocket\n    const greetingMsg = {text: `Hello ${name}`, sender: 'admin'}; // just a greeting mesage\n    setMessages((messages) => [...messages, greetingMsg]); // add greeting message from admin\n    // sendMessageToServer(greetingMsg);\n  }, [ENDPOINT, location.search]);\n  \n  // Helping method for saving message and messageObj\n  // I united two setters in one method, because, as I noticed, they don't work properly separately in Input.js\n  // and I don't know why may be here are some problems with asynchronous. \n  const saveBoth = (value) => {\n    setMessage(value);\n    setMessageObj(() =>({\n      text: value,\n      sender: name,\n    }));\n  }\n  \n  // method of sending message\n  const sendMessage = (event) => {  \n    event.preventDefault();\n    if (message) {\n      sendMessageToServer({text: message});\n      setMessages((messages) => [...messages, messageObj]); \n      setMessage('');\n    }\n  };\n\n  const refreshMessages = (newMessage) => {\n    if (newMessage.sender === name) return\n    setMessages((newMessage) => [...messages, newMessage])    \n  };\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input message={message} sendMessage={sendMessage} saveBoth={saveBoth} />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}